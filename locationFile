package com.example.locationapp

import android.Manifest
import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Looper
import android.provider.Settings
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.core.app.ActivityCompat
import com.google.android.gms.location.*

class LocationKotlinClass : AppCompatActivity() {
    lateinit var mFusedLocationClient: FusedLocationProviderClient
    var latitudeTextView: TextView? = null
    var longitTextView: TextView? = null
    lateinit var btnCustomer: Button
    lateinit var btnMerchant:Button
    var PERMISSION_ID = 44
    var isMerchant = false
    var name = ""
    lateinit var builder: AlertDialog.Builder
    var count = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_location_kotlin_class)
        setContentView(R.layout.activity_main)
        latitudeTextView = findViewById<TextView>(R.id.latTextView)
        longitTextView = findViewById<TextView>(R.id.lonTextView)
        btnCustomer = findViewById<Button>(R.id.btnCustomer)
        btnMerchant = findViewById<Button>(R.id.btnMerchant)
        builder = AlertDialog.Builder(this)
        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        btnCustomer.setOnClickListener(View.OnClickListener {
            name = "customer"
            // method to get the location
            getLastLocation()
        })
        btnMerchant.setOnClickListener(View.OnClickListener {
            name = "merchant"
            isMerchant = true
            // method to get the location
            getLastLocation()
        })
//        // method to get the location
//        getLastLocation();
    }
    @SuppressLint("MissingPermission")
    private fun getLastLocation() {
        // check if permissions are given
        if (checkPermissions()) {

            // check if location is enabled
            if (isLocationEnabled()) {

                // getting last
                // location from
                // FusedLocationClient
                // object
                mFusedLocationClient!!.lastLocation.addOnCompleteListener { task ->
                    val location = task.result
                    if (location == null) {
                        requestNewLocationData()
                    } else {
                        latitudeTextView!!.text = location.latitude.toString() + ""
                        longitTextView!!.text = location.longitude.toString() + ""
                        startActivity(Intent(applicationContext, NextActivity::class.java))
                    }
                }
            } else {
                if (name == "customer") {
                    if (count == 0) {
                        count++
                        showDialog()
                    } else {
                        startActivity(Intent(applicationContext, NextActivity::class.java))
                    }
                } else if (name == "merchant") {
                    Toast.makeText(this, "Please turn on" + " your location...", Toast.LENGTH_LONG)
                        .show()
                    val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
                    startActivity(intent)
                }
            }
        } else {
            // if permissions aren't available,
            // request for permissions
            requestPermissions()
        }
    }
    @SuppressLint("MissingPermission")
    private fun requestNewLocationData() {

        // Initializing LocationRequest
        // object with appropriate methods
        val mLocationRequest = LocationRequest()
        mLocationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY
        mLocationRequest.interval = 5
        mLocationRequest.fastestInterval = 0
        mLocationRequest.numUpdates = 1

        // setting LocationRequest
        // on FusedLocationClient
        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        mFusedLocationClient.requestLocationUpdates(
            mLocationRequest,
            mLocationCallback,
            Looper.myLooper()
        )
    }

    private val mLocationCallback: LocationCallback = object : LocationCallback() {
        override fun onLocationResult(locationResult: LocationResult) {
            val mLastLocation = locationResult.lastLocation
            latitudeTextView!!.text = "Latitude: " + mLastLocation.latitude + ""
            longitTextView!!.text = "Longitude: " + mLastLocation.longitude + ""
            if (isLocationEnabled()) {
                startActivity(Intent(applicationContext, NextActivity::class.java))
            }
        }
    }

    // method to check for permissions
    private fun checkPermissions(): Boolean {
        return ActivityCompat.checkSelfPermission(
            this,
            Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
            this,
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED

        // If we want background location
        // on Android 10.0 and higher,
        // use:
        // ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) == PackageManager.PERMISSION_GRANTED
    }

    // method to request for permissions
    private fun requestPermissions() {
        ActivityCompat.requestPermissions(
            this, arrayOf(
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION
            ), PERMISSION_ID
        )
    }

    // method to check
    // if location is enabled
    private fun isLocationEnabled(): Boolean {
        val locationManager = getSystemService(LOCATION_SERVICE) as LocationManager
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(
            LocationManager.NETWORK_PROVIDER
        )
    }

    // If everything is alright then
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String?>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == PERMISSION_ID) {
            if (grantResults.size > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                getLastLocation()
            } else {
                //ifDenied
                Log.wtf("not", "not")
                if (name == "customer") {
                    startActivity(Intent(applicationContext, NextActivity::class.java))
                } else if (name == "merchant") {
                    //permissionPage Location
                    redirectToAppPermissionDialog()
                }
            }
        }
    }

    override fun onResume() {
        super.onResume()
        if (checkPermissions()) {
            //getLastLocation();
        }
    }

    fun showDialog() {
        //Uncomment the below code to Set the message and title from the strings.xml file
        builder.setMessage("Please On Gps for permisison").setTitle("Permission")

        //Setting message manually and performing action on button click
        builder.setMessage("Please On Gps for permisison")
            .setCancelable(false)
            .setPositiveButton("Yes") { dialog, id ->
                val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
                startActivity(intent)
            }
            .setNegativeButton("No") { dialog, id -> //  Action for 'NO' Button
                dialog.cancel()
                startActivity(Intent(applicationContext, NextActivity::class.java))
            }
        //Creating dialog box
        val alert = builder.create()
        //Setting the title manually
        alert.setTitle("AlertDialogExample")
        alert.show()
    }

    fun redirectToAppPermissionDialog() {
        //Uncomment the below code to Set the message and title from the strings.xml file
        builder.setMessage("Please Allow").setTitle("Permission")

        //Setting message manually and performing action on button click
        builder.setMessage("Please Allow")
            .setCancelable(false)
            .setPositiveButton(
                "Yes"
            ) { dialog, id ->
                startActivity(
                    Intent(
                        Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                        Uri.parse("package:" + BuildConfig.APPLICATION_ID)
                    )
                )
            }
            .setNegativeButton("No") { dialog, id -> //  Action for 'NO' Button
                dialog.cancel()
            }
        //Creating dialog box
        val alert = builder.create()
        //Setting the title manually
        alert.setTitle("AlertDialogExample")
        alert.show()
    }
}
